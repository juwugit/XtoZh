//root -q -b -l JetID_ee.C++\(\"inputFile\"\,\"outputFile\"\)

#include <map>
#include <vector>
#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
#include <TH1D.h>
#include <TRandom.h>
#include <TLorentzVector.h>
#include <TFile.h>
#include "/home/mattwu/CMS_Corp/XtoZh/macro/untuplizer.h"
#include "/home/mattwu/CMS_Corp/XtoZh/macro/passElectronID.h"
#include "/home/mattwu/CMS_Corp/XtoZh/macro/passMuonID.h"
#include "/home/mattwu/CMS_Corp/XtoZh/macro/JetSelections_onlyBasic.h"



using namespace std;
void JetID_ee(std::string inputFile, std::string outputFile){



  //check the inputfile is data or not
  bool isData=false;
  if(inputFile.find("data")!= std::string::npos)
    isData=true;


  //get TTree from file ...
  TreeReader data(inputFile.data());


  //histogram anoucement
  TH1F* h_CA8jetMuEF  = new TH1F("h_CA8jetMuEF","",10,0,1);
  TH1F* h_CA8jetPhoEF = new TH1F("h_CA8jetPhoEF","",10,0,1);
  TH1F* h_CA8jetCEmEF = new TH1F("h_CA8jetCEmEF","",10,0,1);
  TH1F* h_CA8jetCHadEF= new TH1F("h_CA8jetCHadEF","",10,0,1);
  TH1F* h_CA8jetNHadEF= new TH1F("h_CA8jetNHadEF","",10,0,1);


  h_CA8jetMuEF->Sumw2();
  h_CA8jetPhoEF->Sumw2();
  h_CA8jetCEmEF->Sumw2();
  h_CA8jetCHadEF->Sumw2();
  h_CA8jetNHadEF->Sumw2();


  h_CA8jetMuEF->GetXaxis()->SetTitle("MuonEnergyFraction-ele channel");
  h_CA8jetPhoEF->GetXaxis()->SetTitle("PhotonEnergyFraction-ele channel");
  h_CA8jetCEmEF->GetXaxis()->SetTitle("ChargedEmEnergyFraction-ele channel");
  h_CA8jetCHadEF->GetXaxis()->SetTitle("ChargedHadronEnergyFraction-ele channel");
  h_CA8jetNHadEF->GetXaxis()->SetTitle("NeutralHadronEnergyFraction-ele channel");


  

  int counter[5]={0};



  //Event loop
  for(long jEntry=0; jEntry<data.GetEntriesFast() ;jEntry++){

    data.GetEntry(jEntry);


    Int_t    CA8nJet     = data.GetInt("CA8nJet");
    Float_t* CA8jetPt    = data.GetPtrFloat("CA8jetPt");
    Float_t* CA8jetEta   = data.GetPtrFloat("CA8jetEta");
    Float_t* CA8jetPhi   = data.GetPtrFloat("CA8jetPhi");
    Float_t* CA8jetM     = data.GetPtrFloat("CA8jetMass");
    Int_t*   CA8jetID    = data.GetPtrInt("CA8jetPassID");


    // jet id variables
    Float_t* CA8jetMuEF  = data.GetPtrFloat("CA8jetMuEF");
    Float_t* CA8jetPhoEF = data.GetPtrFloat("CA8jetPhoEF");
    Float_t* CA8jetCEmEF = data.GetPtrFloat("CA8jetCEmEF");
    Float_t* CA8jetCHadEF= data.GetPtrFloat("CA8jetCHadEF");
    Float_t* CA8jetNHadEF= data.GetPtrFloat("CA8jetNHadEF");



    Int_t    nEle        = data.GetInt("nEle");
    Float_t* elePt       = data.GetPtrFloat("elePt");
    Float_t* eleEta      = data.GetPtrFloat("eleEta");
    Float_t* elePhi      = data.GetPtrFloat("elePhi");
    Float_t* eleM        = data.GetPtrFloat("eleM");
   
    Int_t    nMu         = data.GetInt("nMu");
    Float_t* muPt        = data.GetPtrFloat("muPt");
    Float_t* muEta       = data.GetPtrFloat("muEta");
    Float_t* muPhi       = data.GetPtrFloat("muPhi");
    Float_t* muM         = data.GetPtrFloat("muM");
   


    // get lep and jet index from header
    vector<Int_t> goodjet;
    PassJetBasic(data, goodjet);
    Int_t leadEle, secEle;
    passElectronID(data, &leadEle, &secEle);
    Int_t leadMu, secMu;
    passMuonID(data, &leadMu, &secMu);




    // trigger
    std::string* trigName = data.GetPtrString("hlt_trigName");
    Int_t* trigResult = data.GetPtrInt("hlt_trigResult");
    const Int_t nsize = data.GetPtrStringSize();

    bool passTrigger=false;
    for(int it=0; it< nsize; it++)
      {
	std::string thisTrig= trigName[it];
	int results = trigResult[it];
     
	if(thisTrig.find("HLT_DoubleEle33")!= std::string::npos && results==1)
	  {
	    passTrigger=true;
	    break;
	  }
	
	/*
	if(thisTrig.find("HLT_Mu22_TkMu8")!= std::string::npos && results==1)
	  {
	    passTrigger=true;
	    break;
	  }
	*/
      }
   
    if(isData && !passTrigger)continue;
    if(!passElectronID(data, &leadEle, &secEle)) continue;



      
    // Reco mLL
    TLorentzVector l1(0,0,0,0);
    TLorentzVector l2(0,0,0,0);
    TLorentzVector recoZ(0,0,0,0);
    
    if(nEle<2) continue;
    l1.SetPtEtaPhiM(elePt[leadEle],eleEta[leadEle],elePhi[leadEle],eleM[leadEle]);
    l2.SetPtEtaPhiM(elePt[secEle],eleEta[secEle],elePhi[secEle],eleM[secEle]);
    recoZ=(l1+l2);
    float zpt=recoZ.Pt();
    float zmass=recoZ.M();

    if(zpt<80) continue;
    if(zmass<70 || zmass>110) continue;
    if(!PassJetBasic(data, goodjet)) continue;

    


    // plot n-1 cut     
    for(Int_t i=0; i<goodjet.size(); i++){
      for(Int_t flag=0; flag<=4; flag++){

        Int_t index=goodjet[i];

        //if(CA8jetMuEF[index]   >0.99) continue;
        if(CA8jetPhoEF[index]  >0.99) continue;
        if(CA8jetCEmEF[index]  >0.99) continue;
        if(CA8jetCHadEF[index] <0.0 ) continue;
        if(CA8jetNHadEF[index] >0.99) continue;


        //switch(flag){

        //case 0: 

	  //if(counter[0]){
	    h_CA8jetMuEF->Fill(CA8jetMuEF[index]);
	    counter[0]++;
	    cout<<"MuEF:"<<counter[0]<<endl;
	    //}

	    /*
	case 1: 

	  //if(counter[1]){
	  h_CA8jetPhoEF->Fill(CA8jetPhoEF[index]);
	  counter[1]++;
	  cout<<"PhoEF:"<<counter[1]<<endl;
	  //}

	case 2: 
	  
	  //if(counter[2]==0){
	  h_CA8jetCEmEF->Fill(CA8jetCEmEF[index]);
	  counter[2]++;
	  cout<<"CEmEF:"<<counter[2]<<endl;
	  //}

        case 3:

	  //if(counter[3]==0){
	  h_CA8jetCHadEF->Fill(CA8jetCHadEF[index]);
	  counter[3]++;
	  cout<<"CHadEF:"<<counter[3]<<endl;
	  //}
	  
	case 4:
	  
	  //if(counter[4]==0){
	  h_CA8jetNHadEF->Fill(CA8jetNHadEF[index]);
	  counter[4]++;
	  cout<<"NHadEF:"<<counter[4]<<endl;
	  //}
	  



	} // switch
	    */

      } // flag
    } // loop jets



    
  }  
  


  //save output
  TFile* outFile = new TFile(outputFile.data(),"recreate");

  h_CA8jetMuEF->Write();
  h_CA8jetPhoEF->Write();
  h_CA8jetCEmEF->Write();
  h_CA8jetCHadEF->Write();
  h_CA8jetNHadEF->Write();
 


  outFile->Close();


}
